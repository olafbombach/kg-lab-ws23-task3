from dataclasses import dataclass
from typing import Optional, List, Set, Union
# from synonymes import Synonymes
# from data_search_opt import SearchEngine
import polars as pl


@dataclass
class Token:
    """
    One of the outputs of the Tokenizer. (tbc)
    """
    keyword: str
    category: str
    weight: float

    def __post_init__(self):
        self.token = (self.keyword, self.category, self.weight)


@dataclass
class TokenSet:
    """
    The complete output that is generated by the Tokenizer. (tbc)
    """
    tokens: Set[Token]

    # maybe add some other properties
    def __post_init__(self):
        self.length: int = len(self.tokens)


@dataclass
class ProceedingsEvent:
    """
    The instance class of a Proceedings.com event. In this all information can be stored during one process run. (tbc)
    """
    input_info: pl.Series = None
    keywords: TokenSet = None

    full_title: str = None
    short_name: Optional[str] = None
    ordinal: Optional[int] = None
    part_of_series: Optional[str] = None
    country_name: Optional[str] = None
    city_name: Optional[str] = None
    main_object: Optional[str] = None
    year: Optional[int] = None
    start_time = None
    end_time = None

    def apply_tokenizer(self):
        self.keywords = Synonymes.synonymes(self.input_info)


    def apply_semantifier(self):
        se = NLP()
        output = se.semantify(self.input_info)
        self.full_title = output['full_title']

        self.full_title: str = None
        self.short_name: Optional[str] = None
        ordinal: Optional[int] = None
        part_of_series: Optional[str] = None
        country_name: Optional[str] = None
        city_name: Optional[str] = None
        main_object: Optional[str] = None
        year: Optional[int] = None
        start_time = None
        end_time = None

    def apply_encoder(self):





@dataclass
class WikidataEvent:
    """
    The instance class of a Wikidata event. In this all information can be stored ruing one process run. (tbc)
    """
    input_info: pl.Series = None
    keywords_score: Optional[float] = None

    # after semantification
    full_title: str = None
    short_name: Optional[str] = None
    ordinal: Optional[int] = None
    part_of_series: Optional[str] = None
    country_name: Optional[str] = None
    city_name: Optional[str] = None
    main_object: Optional[str] = None
    year: Optional[int] = None
    start_time = None
    end_time = None

    '''def apply_searchengine(self, source: str = "Wikidata", fastsearch: bool = "False"):
        se = SearchEngine(source, f_seach=fastsearch)
        pass'''



@dataclass
class EventSeries:
    """
    Not sure yet, where we would have to use this.
    """
    collection: List[Union[ProceedingsEvent, WikidataEvent]]


def main():
    tok1 = Token(keyword="eight", category="ordinal", weight=40)
    tok2 = Token(keyword="Conference", category="title", weight=75)
    set_of_tokens = set()
    set_of_tokens.add(tok1.token)
    set_of_tokens.add(tok2.token)
    keywords = TokenSet(set_of_tokens)
    print((keywords.tokens))


if __name__ == "__main__":
    main()
